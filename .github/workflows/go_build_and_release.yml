name: Go Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for release'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create tag
        run: git tag v${{ github.event.inputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: "${{ github.event.inputs.version }}"
          draft: false
          prerelease: false

  build:
    permissions: write-all
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, darwin, linux]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Build AI binary
        run: go build -o ai-${{ matrix.goos }}-${{ matrix.goarch }}${{ (matrix.goos == 'windows') && '.exe' || '' }} ai.go

      - name: Archive build artifacts
        id: artifacts
        run: |
          VERSION=${{ github.event.inputs.version }}
          mkdir -p release
          FILENAME=ai-${VERSION}-${GOOS}-${GOARCH}${{ (matrix.goos == 'windows') && '.exe' || '' }}
          mv ai-${GOOS}-${GOARCH}${{ (matrix.goos == 'windows') && '.exe' || '' }} ./release/${FILENAME}
          echo "::set-output name=filename::${FILENAME}"

      - name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./release/${{ steps.artifacts.outputs.filename }}
          asset_name: ${{ steps.artifacts.outputs.filename }}
          asset_content_type: application/octet-stream